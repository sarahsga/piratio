{"version":3,"sources":["components/Clock.jsx","components/Message.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","Message","App","start","bind","stop","state","count","isStarted","this","setState","interval","setInterval","parseInt","Math","random","clearTimeout","className","variant","size","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAEmCA,YCwBpBC,I,iBCkCAC,E,YApDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBAEZ,EAAKE,MAAQ,CACXC,MAAO,EACPC,WAAW,GAPD,E,qEAaL,IAAD,QACsB,IAAzBC,KAAKH,MAAME,YACdC,KAAKC,SAAS,CACZF,WAAW,IAGbC,KAAKE,SAAWC,aAAY,WAC1B,EAAKF,SAAS,CACZH,MAAOM,SAAyB,GAAhBC,KAAKC,cAEtB,Q,8BAK0B,IAAzBN,KAAKH,MAAME,YACbC,KAAKC,SAAS,CACZF,WAAW,IAEbQ,aAAaP,KAAKE,a,+BAOpB,OACE,yBAAKM,UAAU,OACb,4BAAKR,KAAKH,MAAMC,OAChB,yBAAKU,UAAU,qBACdR,KAAKH,MAAME,UAAY,kBAAC,IAAD,CAAQU,QAAQ,kBAAkBC,KAAK,KAAKC,QAASX,KAAKJ,MAA1D,QAAgF,kBAAC,IAAD,CAAQa,QAAQ,kBAAkBC,KAAK,KAAKC,QAASX,KAAKN,OAA1D,e,GA5C9FH,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d41d939.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Clock extends Component {\n\n    constructor() {\n        super();\n        this.count = 0\n        this.state = {\n            time: new Date(),\n            count: 0\n        }\n\n        setInterval(() => {\n            // this.setState({\n            //     count: Math.random()\n            // })\n            this.count = Math.random();\n        }, 1000);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.count}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './Message.css';\nimport PropTypes from 'prop-types';\n\nfunction Message(props) {\n    return (\n        <li>\n            <img src={props.imgURL} alt={props.name} />\n            <div className=\"body\">\n                <h3>{props.name}</h3>\n                <p>{props.number}</p>\n                <p>{props.message}</p>\n                <p>{props.time}</p>\n            </div>\n        </li>\n    )\n}\n\nMessage.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string,\n    time: PropTypes.string,\n    imgURL: PropTypes.string.isRequired,\n    message: PropTypes.string,\n}\n\nexport default Message;","import React, {Component} from 'react';\nimport './App.css';\nimport Message from './components/Message';\nimport axios from 'axios';\nimport Clock from './components/Clock';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n\n    this.state = {\n      count: 0,\n      isStarted: false\n    }\n\n\n  }\n\n  start() {\n   if (this.state.isStarted === false) {\n    this.setState({\n      isStarted: true\n    })\n\n    this.interval = setInterval(() => {\n      this.setState({\n        count: parseInt(Math.random() * 10)\n      })\n    }, 1000);\n   }\n  }\n\n  stop() {\n    if (this.state.isStarted === true) {\n      this.setState({\n        isStarted: false\n      })\n      clearTimeout(this.interval);\n    }\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{this.state.count}</h1>\n        <div className=\"buttons-container\">\n        {this.state.isStarted ? <Button variant=\"outline-warning\" size=\"lg\" onClick={this.stop}>Stop</Button> : <Button variant=\"outline-warning\" size=\"lg\" onClick={this.start}>Start</Button>}\n            \n            \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}